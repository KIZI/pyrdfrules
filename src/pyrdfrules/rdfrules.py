# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/propi/rdfrules/master/http/schema.json
#   timestamp: 2024-09-11T13:34:02+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class BaseObject(BaseModel):
    pass


class GraphPath(RootModel[str]):
    root: str = Field(
        ...,
        pattern='^.+[.](ttl|nt|nq|json|jsonld|xml|rdf|owl|trig|trix|tsv|sql|cache)([.](gz|bz2))?$',
        title='Choose a file from the workspace',
    )
    """
    Load a file from the workspace on the server side. The dataset format is detected automatically by the file extension. Supported extensions are .ttl (turtle), .nt (n-triples), .nq (n-quads), .json | .jsonld (JSON-LD), .xml | .rdf | .owl (RDF/XML), .trig (TriG), .trix (TriX), .tsv, .sql, .cache (internal binary format). All formats can be compressed by GZIP or BZ2 (e.g. data.ttl.gz).
    """


class GraphUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., title='URL')
    """
    A URL to a remote file to be loaded. If this is specified then the workspace file is ommited.
    """


class GraphName(RootModel[str]):
    root: str = Field(..., pattern='^<.*>$', title='Graph name')
    """
    Name for this loaded graph. It must have the URI notation in angle brackets, e.g., <dbpedia> or `<http://dbpedia.org>`.
    """


class SourceSettings(Enum):
    tsvRaw = 'tsvRaw'
    tsvParsedUris = 'tsvParsedUris'
    tsvParsedLiterals = 'tsvParsedLiterals'


class QuadFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    subject: Optional[str] = None
    predicate: Optional[str] = None
    object: Optional[str] = None
    graph: Optional[str] = None
    inverse: Optional[bool] = None


class LoadGraph(BaseModel):
    name: Literal['LoadGraph'] = 'LoadGraph'
    parameters: Optional[BaseObject] = None


class FilterQuads(BaseModel):
    name: Literal['FilterQuads'] = 'FilterQuads'
    parameters: Optional[BaseObject] = None


class Model(RootModel[List[Union[LoadGraph, FilterQuads]]]):
    root: List[Union[LoadGraph, FilterQuads]]
