from typing import List
from pydantic import BaseModel

from pyrdfrules.common.rule.rule import Rule

class Ruleset(BaseModel):
    """
    Class representing a list of mined rules from RDFRules.

    Args:
        rules (List[Rule]): List of mined rules from RDFRules.
    """
    
    """
    List of rules generated by RDFRules.
    """
    rules: List[Rule]
    
    """
    True if the ruleset is complete.

    Returns:
        _type_: _description_
    """
    is_finished: bool = False
    
    """
    Index of the ruleset iterator.

    Returns:
        int: Iterator index.
    """
    __iterator_index: int = 0
    
    def get_rules(self) -> List[Rule]:
        # async return all rules
        pass
    
    def as_json(self) -> str:
        return ''
    
    def as_text(self) -> str:
        return ''
    
    # region iterator
    def __iter__(self):
        self.__iterator_index = 0
        return self

    def __next__(self) -> Rule | None:
        idx = self.__iterator_index + 1
        
        if len(self.rules) < idx:
            self.__iterator_index = idx
            return self.rules[idx]
        
        return None
    # endregion
    
    # todo - sort by functions, serialisation, deserialisation, export to some well-known formats for further analysis
    # todo - async generator for rules